// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/wrappers.proto";

package tensorflow_model_analysis;


// The value will be converted into an error message if we do not know its type.
message UnknownType {
  string error = 1;
  bytes value = 2;
}

// Represents a real value which could be a pointwise estimate, optionally with
// approximate bounds of some sort. For instance, for AUC, these bounds could be
// the upper and lower Riemann sum of the integral.
message BoundedValue {
  // The lower bound of the range.
  google.protobuf.DoubleValue lower_bound = 1;
  // The upper bound of the range.
  google.protobuf.DoubleValue upper_bound = 2;
  // Represents an exact value if the lower_bound and upper_bound are unset,
  // else it's an approximate value. For the approximate value, it should be
  // within the range [lower_bound, uppper_bound].
  google.protobuf.DoubleValue value = 3;

  enum Methodology {
    UNKNOWN = 0;
    // Used to calculate AUC, the upper and lower Riemann sum for an integral.
    RIEMANN_SUM = 1;
  }
  // Optionally describe the methodology that was used to calculate the bounds.
  Methodology methodology = 4;
}

// Value at cutoffs, e.g. for precision@K, recall@K
message ValueAtCutoffs {
  message ValueCutoffPair {
    int32 cutoff = 1;
    double value = 2;
  }
  repeated ValueCutoffPair values = 1;
}

// Confusion matrix at thresholds.
message ConfusionMatrixAtThresholds {
  message ConfusionMatrixAtThreshold {
    double threshold = 1;
    double false_negatives = 2;
    double true_negatives = 3;
    double false_positives = 4;
    double true_positives = 5;
    double precision = 6;
    double recall = 7;
  }
  repeated ConfusionMatrixAtThreshold matrices = 1;
}

// Represents a computed result for a ratio value, optionally with an associated
// confidence interval. Computing confidence intervals of ratios requires
// keeping track of the aggregated numerator and denominator separately.
message RatioValue {
  google.protobuf.DoubleValue numerator = 1;
  google.protobuf.DoubleValue denominator = 2;
  BoundedValue ratio = 3;
}

// For metrics which return an array of values.
message ArrayValue {
  enum DataType {
    UNKNOWN = 0;
    BYTES = 1;
    INT32 = 2;
    INT64 = 3;
    FLOAT32 = 4;
    FLOAT64 = 5;
  }

  DataType data_type = 1;

  repeated int32 shape = 2;

  // Exactly one of these fields, corresponding to the data type, should be set.
  repeated bytes bytes_values = 3;
  repeated int32 int32_values = 4;
  repeated int64 int64_values = 5;
  repeated float float32_values = 6;
  repeated double float64_values = 7;
}

// It stores metrics values in different types, so that the frontend will know
// how to visualize the values based on the types.
message MetricValue {
  oneof type {
    google.protobuf.DoubleValue double_value = 1;
    BoundedValue bounded_value = 2;
    ValueAtCutoffs value_at_cutoffs = 4;
    ConfusionMatrixAtThresholds confusion_matrix_at_thresholds = 5;
    UnknownType unknown_type = 3;
    bytes bytes_value = 6;
    ArrayValue array_value = 7;
    RatioValue ratio_value = 8;
  }
}

// A single slice key.
message SingleSliceKey {
  string column = 1;
  oneof kind {
    bytes bytes_value = 2;
    float float_value = 3;
    int64 int64_value = 4;
  }
}

// A slice key, which may consist of multiple single slice keys.
message SliceKey {
  repeated SingleSliceKey single_slice_keys = 1;
}

message MetricsForSlice {
  // The slice key for the metrics.
  SliceKey slice_key = 1;
  // A map to store metrics. Currently we convert the post_export_metric
  // provided by TFMA to its appropriate type for better visualization, and map
  // all other metrics to DoubleValue type.
  map<string, MetricValue> metrics = 2;
}

message CalibrationHistogramBuckets {
  message Bucket {
    double lower_threshold_inclusive = 1;
    double upper_threshold_exclusive = 2;
    google.protobuf.DoubleValue num_weighted_examples = 3;
    google.protobuf.DoubleValue total_weighted_label = 4;
    google.protobuf.DoubleValue total_weighted_refined_prediction = 5;
  }
  repeated Bucket buckets = 1;
}

message PlotData {
  // For calibration plot and prediction distribution.
  CalibrationHistogramBuckets calibration_histogram_buckets = 1;
  // For auc curve and auprc curve.
  ConfusionMatrixAtThresholds confusion_matrix_at_thresholds = 2;
}

message PlotsForSlice {
  // The slice key for the metrics.
  SliceKey slice_key = 1;
  // The plot data
  PlotData plot_data = 2;
}

